{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.10"
    },
    "colab": {
      "name": "EDA-Copy1.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "NuNyXEdLPgjc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7483ba5a-8e8a-4096-ec34-ff3e92f67527"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from scipy.stats import randint\n",
        "from sklearn.linear_model import LogisticRegression, LinearRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
        "from sklearn.preprocessing import StandardScaler,MinMaxScaler\n",
        "from sklearn.model_selection import train_test_split, StratifiedShuffleSplit, GridSearchCV, RandomizedSearchCV\n",
        "from sklearn.metrics import matthews_corrcoef,make_scorer\n",
        "from sklearn.feature_selection import SelectKBest\n",
        "from sklearn.svm import SVC\n",
        "from xgboost import XGBClassifier\n",
        "import lightgbm\n",
        "from lightgbm import LGBMClassifier\n",
        "import os\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "np.random.seed(42)\n",
        "\n",
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C49bk3e2ojeI"
      },
      "source": [
        "def get_model(i):\n",
        "    if i == '0':\n",
        "        model = RandomForestClassifier(max_depth=15,n_estimators=50,bootstrap=False,max_features='auto')\n",
        "    elif i=='1':\n",
        "        model = RandomForestClassifier(max_depth=15,n_estimators=500,bootstrap=False,max_features='sqrt')\n",
        "    elif i == '2':\n",
        "        model = RandomForestClassifier(max_depth=20,n_estimators=50,bootstrap=False,max_features='sqrt')\n",
        "    elif i == '3':\n",
        "        model = RandomForestClassifier(max_depth=10,n_estimators=50,bootstrap=False,max_features='sqrt')\n",
        "    elif i == '4':\n",
        "        model = RandomForestClassifier(max_depth=20,n_estimators=500,bootstrap=False,max_features='auto')\n",
        "    else:\n",
        "        model = RandomForestClassifier(max_depth=10,n_estimators=500,bootstrap=False,max_features='auto')\n",
        "\n",
        "    return model"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z0wNFMIpZFan"
      },
      "source": [
        "def model_train(train_data,test_data,d_n,ypred):\n",
        "\n",
        "    param = {'n_estimators':[50,100,200,500,750,1000],'max_depth':[1,5,10,15,20],'max_features':['sqrt','auto','log2']}\n",
        "    ypred1 = ypred\n",
        "    test_cols = ['CO: 1','CO: 2','CO: 3','CO: 4','CO: 5','CO: 6']\n",
        "    if d_n == 1:\n",
        "      test_cols_1 = ['CO: 1','CO: 2']\n",
        "    elif d_n == 2:\n",
        "      test_cols_1 = ['CO: 3','CO: 4','CO: 5','CO: 6']\n",
        "    \n",
        "    \n",
        "    X_train = train_data.drop(test_cols_1, axis=1, errors='ignore')\n",
        "    y_train = train_data[test_cols_1]\n",
        "    X_test = test_data.drop(test_cols_1, axis=1, errors='ignore')\n",
        "\n",
        "    scaler = StandardScaler()\n",
        "    scaledX_train = scaler.fit_transform(X_train).astype(float)\n",
        "    scaledX_test = scaler.fit_transform(X_test).astype(float)\n",
        "\n",
        "    X_train = scaledX_train\n",
        "    X_test = scaledX_test\n",
        "\n",
        "    #X_train_1, X_val_1, y_train_1, y_val_1 = train_test_split(X_train, y_train, stratify=y_train,test_size = 0.2, random_state = 30)\n",
        "\n",
        "    for i in range(len(test_cols_1)):\n",
        "        y_train_1 = np.array(y_train[test_cols_1[i]])\n",
        "        #y_val_11 = np.array(y_val_1[test_cols_1[i]])\n",
        "        y_train_1 = y_train_1.reshape(y_train_1.shape[0],)\n",
        "        #y_val_11 = y_val_11.reshape(y_val_11.shape[0],)\n",
        "        \n",
        "        #model_1 = GridSearchCV(RandomForestClassifier(),param)\n",
        "        if test_cols_1[i][4] != '8':\n",
        "          model_1 = get_model(test_cols_1[i][4])\n",
        "          #model_1 = RandomForestClassifier(max_depth=5,max_features='sqrt')\n",
        "          #model_1.fit(X_train_1,y_train_11)\n",
        "          model_1.fit(X_train,y_train_1)\n",
        "          print(test_cols_1[i],model_1.score(X_train,y_train_1))\n",
        "          #print(test_cols_1[i],model_1.score(X_val_1,y_val_11))\n",
        "          #print(\"MCC\",matthews_corrcoef(y_val_11,model_1.predict(X_val_1)))\n",
        "          ypred1.extend(model_1.predict(X_test))\n",
        "        #print(model_1.best_params_)\n",
        "\n",
        "\n",
        "    return ypred1\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WXFyJSdPcn8N"
      },
      "source": [
        "def submission(pred):\n",
        "\n",
        "  pred = np.array(pred)\n",
        "  submission = pd.DataFrame(pred,columns=['Predicted'])\n",
        "  submission.index.name = 'Id'\n",
        "  submission.Predicted = np.array(pred,dtype=int)\n",
        "  submission.to_csv('/content/gdrive/My Drive/prmldatacontest/RF(9_5).csv',index=True)\n",
        "  print(submission.shape)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Stjx2AvjPgjm"
      },
      "source": [
        "#Importing Dataset\n",
        "np.random.seed(42)\n",
        "train_1 = pd.read_csv(\"/content/gdrive/My Drive/prmldatacontest/Dataset_1_Training.csv\",index_col=0)\n",
        "test_1 = pd.read_csv(\"/content/gdrive/My Drive/prmldatacontest/Dataset_1_Testing.csv\",index_col=0)\n",
        "\n",
        "train_2 = pd.read_csv(\"/content/gdrive/My Drive/prmldatacontest/Dataset_2_Training.csv\",index_col=0)\n",
        "test_2 = pd.read_csv(\"/content/gdrive/My Drive/prmldatacontest/Dataset_2_Testing.csv\",index_col=0)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qjee5oxFa1Eq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "63276555-1dda-4476-afa6-c2af4a606e5e"
      },
      "source": [
        "pred = []\n",
        "pred1 = model_train(train_1.T,test_1.T,1,pred)\n",
        "pred2 = model_train(train_2.T,test_2.T,2,pred1) "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CO: 1 1.0\n",
            "CO: 2 1.0\n",
            "CO: 3 1.0\n",
            "CO: 4 1.0\n",
            "CO: 5 1.0\n",
            "CO: 6 1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aChuiKI9nHAu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ce999e59-6cd1-473e-fed8-35508c42535b"
      },
      "source": [
        "#Submission\n",
        "submission(pred2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1056, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gOIeiAt9mGSD",
        "outputId": "4eefed6b-97a1-4918-c63a-71024c65ae4b"
      },
      "source": [
        "nine_2 = pd.read_csv('/content/gdrive/My Drive/prmldatacontest/results (14).csv')\n",
        "nine_2 = nine_2.drop('Id',axis=1,errors='ignore')\n",
        "nine_2 = np.array(nine_2)\n",
        "np.shape(nine_2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1056, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eOl9_UOMolng",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "45d17ff4-a98f-4d35-ade1-d1da06ab0129"
      },
      "source": [
        "k = 0\n",
        "for j in range(len(pred2)):\n",
        "    if pred2[j] != nine_2[j]:\n",
        "      k = k+1\n",
        "print(k)"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "79\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "8kVjVBxjPgj7",
        "outputId": "d74cc925-702d-4bcc-bf10-a01ba18f43a2"
      },
      "source": [
        "train_small.hist(bins = 50, figsize = (10,10))\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x720 with 9 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
